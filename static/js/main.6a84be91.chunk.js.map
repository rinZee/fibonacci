{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","inputValue","setInputValue","result","setResult","fibonacci","n","array","i","push","add","convert","length","undefined","arr1","arr2","sum","transfer","translateToString","str","className","onSubmit","e","preventDefault","type","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAmGeA,MAjGf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KASMC,EAAY,SAACC,GAGjB,IADA,IAAIC,EAAQ,CAAC,CAAC,GAAI,CAAC,IACVC,EAAI,EAAGA,GAAKF,EAAGE,IACtBD,EAAME,KAAKC,EAAIH,EAAMC,EAAI,GAAID,EAAMC,EAAI,KAEzC,OAAOD,EAAMD,IAITK,EAAU,SAACJ,EAAOK,GACtB,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAAQJ,SACTK,IAAbN,EAAMC,KACRD,EAAMC,GAAK,GAGf,OAAOD,GAGHG,EAAM,SAACI,EAAMC,GAGbD,EAAKF,OAASG,EAAKH,OACrBG,EAAOJ,EAAQI,EAAMD,EAAKF,QACjBE,EAAKF,OAASG,EAAKH,SAC5BE,EAAOH,EAAQG,EAAMC,EAAKH,SAK5B,IAFA,IAAII,EAAM,GACNC,EAAW,EACNT,EAAI,EAAGA,EAAIM,EAAKF,OAAQJ,IAG3BM,EAAKN,GAAKO,EAAKP,GAAKS,EAAW,IACjCD,EAAIR,GAAKM,EAAKN,GAAKO,EAAKP,GAAKS,EAC7BA,EAAW,IAGXD,EAAIR,IAAMM,EAAKN,GAAKO,EAAKP,GAAKS,GAAY,GAC1CA,EAAW,GAOf,OAHIA,GACFD,EAAIP,KAAKQ,GAEJD,GAKHE,EAAoB,SAACX,GAEzB,IADA,IAAIY,EAAM,GACDX,EAAID,EAAMK,OAAS,EAAGJ,GAAK,EAAGA,IACrCW,GAAYZ,EAAMC,GAEpB,OAAOW,GAET,OACE,sBAAKC,UAAU,MAAf,UACE,2CACA,uBAAMA,UAAU,OAAOC,SApEZ,SAACC,GACdA,EAAEC,iBACFnB,EAAUc,EAAkBb,EAAUN,KACtCG,EAAcH,GACdC,EAAS,KAgEP,UACE,uBACEwB,KAAK,OACLzB,MAAOA,EACP0B,SAAU,SAACH,GACTtB,EAASsB,EAAEI,OAAO3B,UAGtB,wBAAQqB,UAAU,SAAlB,wBAGU,IAAXjB,EACC,sBAAKiB,UAAU,SAAf,UACE,qCAAQnB,EAAR,wCAEA,4BAAIE,OAGN,OCjFOwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6a84be91.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nfunction App() {\n  const [value, setValue] = useState(\"\");\n  const [inputValue, setInputValue] = useState(\"\");\n  const [result, setResult] = useState(0);\n\n  const Submit = (e) => {\n    e.preventDefault();\n    setResult(translateToString(fibonacci(value)));\n    setInputValue(value);\n    setValue(\"\");\n  };\n\n  const fibonacci = (n) => {\n    // we will be using array in array instead of number\n    let array = [[0], [1]];\n    for (let i = 2; i <= n; i++) {\n      array.push(add(array[i - 1], array[i - 2]));\n    }\n    return array[n];\n  };\n\n  // function that takes an array and length as an arguemnt. Then it converts the array into the same length and pushes undefined to 0 beacause undefined cannot be used in mathematical calculation\n  const convert = (array, length) => {\n    for (let i = 0; i < length; i++) {\n      if (array[i] === undefined) {\n        array[i] = 0;\n      }\n    }\n    return array;\n  };\n  //adds two arrays\n  const add = (arr1, arr2) => {\n    // checks if array length is equal if not calls the convert function\n    // if arr1 = [1,2,4,5] and arr2 = [1, 5, 1, 3, 5] it will convert arr1 to [1,2,4,5,0]\n    if (arr1.length > arr2.length) {\n      arr2 = convert(arr2, arr1.length);\n    } else if (arr1.length < arr2.length) {\n      arr1 = convert(arr1, arr2.length);\n    }\n    // sum is the array we push to when we add each element from arr1 and arr2\n    let sum = [];\n    let transfer = 0;\n    for (let i = 0; i < arr1.length; i++) {\n      // if the sum[i] is single digit then we just push it directly to sum\n\n      if (arr1[i] + arr2[i] + transfer < 10) {\n        sum[i] = arr1[i] + arr2[i] + transfer;\n        transfer = 0;\n      } else {\n        //else we push the remainder for eg (9+8+0)%10 = 7 and set transfer to 1\n        sum[i] = (arr1[i] + arr2[i] + transfer) % 10;\n        transfer = 1;\n      }\n    }\n    //if transfer is 1 we push it to the sum\n    if (transfer) {\n      sum.push(transfer);\n    }\n    return sum;\n  };\n\n  //convert the array to string\n  //[1,2,4,5,6,7] =====> '765421'\n  const translateToString = (array) => {\n    var str = \"\";\n    for (let i = array.length - 1; i >= 0; i--) {\n      str = str + array[i];\n    }\n    return str;\n  };\n  return (\n    <div className=\"App\">\n      <h1>Fibonacci</h1>\n      <form className=\"form\" onSubmit={Submit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n        />\n        <button className=\"button\">Get Fib</button>\n      </form>\n\n      {result !== 0 ? (\n        <div className=\"result\">\n          <p>The {inputValue} number in fibonacci sequence is :</p>\n\n          <p>{result}</p>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}